{% spaceless %}
chdir {{ cmake.source_dir }}

set path=.
set path+={{ cmake.source_dir }}
{% for item in editor_search_dirs %}set path+={{ item }}
{% endfor %}
{% ifequal os.name 'posix' %}
set path+=/usr/include
{% endifequal %} 

function! OpenAlternateFile()
  python << end_of_python
import os, sys, vim, re
curFile = vim.current.buffer.name
altFile = None
{% for item in project_modules %}
if altFile is None:
  {{ item }}_src_re = re.compile('{{ cmake.source_dir }}/{{ item }}/Src/([^\.]*)\.cxx$')
  {{ item }}_inc_re = re.compile('{{ cmake.source_dir }}/{{ item }}/Include/{{ item }}/([^\.]*)\.hxx$')
  
  if ({{ item }}_src_re.match(curFile)):
    altFile = {{ item }}_src_re.sub('{{ cmake.source_dir }}/{{ item }}/Include/{{ item }}/\\1.hxx', curFile)
  elif ({{ item }}_inc_re.match(curFile)):
    altFile = {{ item }}_inc_re.sub('{{ cmake.source_dir }}/{{ item }}/Src/\\1.cxx', curFile)
{% endfor %}
if altFile is None:
  s_re = re.compile ('{{ cmake.source_dir }}/Src/([^\.]*)\.cxx$')
  i_re = re.compile ('{{ cmake.source_dir }}/Include/([^\.]*)\.hxx$')

  if s_re.match(curFile):
    altFile = s_re.sub('{{ cmake.source_dir }}/Include/\\1.hxx', curFile)
  elif i_re.match(curFile):
    altFile = i_re.sub('{{ cmake.source_dir }}/Src/\\1.cxx', curFile)

if altFile is not None:
  vim.command('call OpenFile("%s")' % altFile)

end_of_python
endfunction "OpenAlternateFile()

nmap <silent> <C-A> :call OpenAlternateFile()<CR>
nmap <silent> ,a :call OpenAlternateConfigFile()<CR>
nmap <silent> ,m :call OpenFile('{{ cmake.parent_list_file }}')<CR>
nmap <silent> ]c :call OpenFile('{{ cmake.config_file }}')<CR>
nmap <silent> ]v :call OpenFile('{{ file.in.cmakevar }}')<CR>
nmap <silent> [v :call OpenFile('{{ file.out.cmakevar }}')<CR>
nmap <silent> [i :call OpenFile('{{ file.out.gvim }}')<CR>
nmap <silent> ]i :call OpenFile('{{ file.in.gvim }}')<CR>
nmap [b :e {{ cmake.binary_dir }}/
nmap [s :e {{ cmake.source_dir }}/

{% endspaceless %}